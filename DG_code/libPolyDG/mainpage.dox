namespace PolyDG {
/*!
	@mainpage Introduction to the library

	%PolyDG is a library for the approximation of elliptic problems with Discontinuous
	Galerkin finite element methods on polyhedral grids.
	It makes use of the technique of *expression templates* in order to speed up the
	assembling of the matrix and of the right-hand-side of the linear system, moreover
	this approach allows a flexible implementation of different models starting from
	the variational formulation of the problem.
	It is written in C++11.

	@section dgfem DG finite element methods
		Discontinuous Galerkin methods have shown to be very flexible and have been
		successfully applied to hyperbolic, elliptic and parabolic problems arising from many
		different fields of application. Moreover one of the main advantages with
		respect to the continuous framework is the possibility of handling meshes with
		hanging nodes and made of general-shaped elements without any difficulty.
		Meshes made of general polyhedral elements can be useful in many problems, especially when
		we have to deal with domains that present small details or microstructures;
		these features would need too many @a classical tetrahedral/hexahedral
		elements to be described and so too many degrees of freedom.

	@section getting_started Getting started
		If you want to write a program that solves an elliptic partial differential
		equation, you have to deal with three subsequent steps: the reding of the Mesh from
		a file, the creation of the FeSpace and the instantation of the Problem.

	@note	You have to use the namespace PolyDG to access each class, function and
		type in the library (there are only few functions in the namespace Utilities).

	@subsection mesh Reading the mesh
		@code
			// Define a MeshReader
			MeshReaderPoly reader;
			// Define a Mesh
			Mesh Th("fileName.mesh", reader);
			// Print some information
			Th.printInfo();
		@endcode

		The reading of the mesh is simple, you have to declare a MeshReader and
		to pass it to the constructor of Mesh together with the name of the file
		containing the mesh.@n
		The library provides a class MeshReaderPoly that inherits from MeshReader
		and can be used to read tridimensional tetrahedral MEDIT text meshes with the extension *.mesh
		(see https://www.ljll.math.upmc.fr/frey/publications/RT-0253.pdf for more information)
		or a polyhedral meshes generated with METIS
		(see http://glaros.dtc.umn.edu/gkhome/metis/metis/overview) using the bash
		script provided with the meshes used for the examples.

		If you need to read a mesh stored in another format, you can write your own
		reader @c myReader inheriting from the class MeshReader. The class has to
		implement a method @c read(Mesh& mesh, const std::string& fileName) that performs
		the actual reading from the file @c fileName and fills the containers of
		@c mesh using a MeshProxy. In particular you have to read vertices with their
		coordinates, tetrahdra with their vertices and polyhedra in which are contained,
		external faces with their label and polyhedra with the tetrahedra that they
		contain.

	@subsection fespace Creating the FeSpace
		@code
			// Degree of exactness for the quadrature rule over tetrahedra
			unsigned quad3dDoe = 2;
			// Degree of exactness for the quadrature rule over triangles
			unsigned quad2dDoe = 4;
			// Degree of the polynomials in the FeSpace
			unsigned degree    = 2;
			// Define a FeSpace
			FeSpace Vh(Th, degree, quad3dDoe, quad2dDoe);
			// Print some information
			Vh.printInfo();
		@endcode

		The creation of the FeSpace is simple too, in the constructor you have to pass
		the Mesh @c Th and the degree of the polynomials in the FeSpace.

		@remark
			The method makes use of legendre polynomials to construct the basis of the
			FeSpace through the functions legendre(unsigned n, Real x) and legendreDer(unsigned n, Real x),
			they are implemented up to @c n = 8.

		If you want you can choose the quadrature rules you want to use specifying the
		degrees of exactness. Quadrature rules are stores in QuadRuleManager. actually
		there are rules over tetrahedra with degree of exactness from 1 to 8 and quadrature
		rules over triangles with degree of exactness from 1 to 10. Some of them have
		one negative weight.@n
		You can add a new rule with QuadRuleManager::setTetraRule(const QuadRule3D& rule)
		and QuadRuleManager::setTriaRule(const QuadRule2D& rule).

		@subsection problem Instantation of the Problem
			@code
				// Define a problem
				Problem poisson(Vh);
			@endcode

			The instantation of the Problem is the key part of the program.
			To the constructor you have to pass only the FeSpace that is used for the
			approximation of the solution and for the test functions.

			Then there are three substeps: the definition of the variational formulation,
			the integration and the solution of the linear system. Let us suppose we
			want to solve the	Poisson problem with Dirchlet boundary conditions, then
			the variational formulation is:@n
			find \f$ u \in H^s(\mathcal{T}), s>3/2 \f$, such that:
			\f[
			\sum_{\kappa \in \mathcal{T}} \int_\kappa \nabla u \cdot \nabla v
			-\sum_{e \in \Gamma} \bigg( \int_e [v] \cdot \{\!\!\{ \nabla u \}\!\!\}
			+ \int_e [u] \cdot \{\!\!\{ \nabla v \}\!\!\}
			- \gamma_e \int_e [u] \cdot [v] \bigg)\\
			= \sum_{\kappa \in \mathcal{T}} \int_\kappa fv
			+ \sum_{e \in \Gamma_D} \bigg( - \int_e g \nabla v \cdot \mathbf{n}
			+ \gamma_e \int_e gv \bigg) \quad \forall v \in H^s(\mathcal{T})
			\f]
			where \f$ \mathcal{T} \f$ is the mesh, \f$ \Gamma_D \f$ is the set of
			external faces with Dirichlet boundary conditions and \f$ \Gamma = \Gamma_h
			\cup \Gamma_D \f$, with \f$ \Gamma_h \f$ the set of internal faces.

			@subsubsection operators Operators
				@code
					// Test function
					PhiI            v;
					// Gradient of the solution
					GradPhiJ        uGrad;
					// Gradient of the test function
					GradPhiI        vGrad;
					// Jump of the solution
					JumpPhiJ        uJump;
					// Jump of the test function
					JumpPhiI        vJump;
					// Average of the gradient of the solution
					AverGradPhiJ    uGradAver;
					// Average of the gradient of the test function
					AverGradPhiI    vGradAver;
					// Penalty scaling for the penalization term
					PenaltyScaling  gamma(10.0);
					// Normal vector to faces
					Normal          n;
					// Source function
					Function        f(source);
					// Dirichlet datum
					Function        gd(uex);
				@endcode

				First you have to declare the operators you want to use to compose the
				variational formulation. Basically they are callable objects and once defined
				you can use them many times.

				@note
					Operators that end with @c J are related to the solution, operators
					that end with @c I are related to the test function.

			@subsubsection integration Integration
				@code
					// Integration of the bilinear form over the volume of the elements
					poisson.integrateVol(dot(uGrad, vGrad), true);
					// Integration of the bilinear form over the external faces
					poisson.integrateFacesExt(-dot(uGradAver, vJump) - dot(uJump, vGradAver) + gamma * dot(uJump, vJump), {1, 2, 3, 4, 5, 6}, true);
					// Integration of the bilinear form over the internal faces
					poisson.integrateFacesInt(-dot(uGradAver, vJump) - dot(uJump, vGradAver) + gamma * dot(uJump, vJump), true);
					// Integration of the rhs over the volume of the elements
					poisson.integrateVolRhs(f * v);
					// Integration of the rhs over the external faces
					poisson.integrateFacesExtRhs(-gd * dot(n, vGrad) + gamma * gd * v, {1, 2, 3, 4, 5, 6});
					// Assembly of the matrix
					poisson.finalizeMatrix();
				@endcode

				Then you have to insert the variational formulation that may consist of
				integrals over volumes, external faces and integrnal faces. You can une
				the operator dot to perform scalar products, while you can use +, *, -, /
				for algebraic operations with real numbers.@n
				In the integrals over external faces you have to specify over which faces
				you want to integrate, using the labels. In the example above @c {1,2,3,4,5,6}
				stands for a @c std::vector<BCLabelType> containing the label of faces,
				that in this case are all the faces of the cube.@n
				For each of the integrals of the bilinear form, you can specify if it is
				symmetric or not with respect to the solution and the test function (if
				not specified it is assumed to be non-symmetric). If an integral is symmetric
				it can be computed for half of the basis function, with a noticible reduction
				in the computational cost. Moreover if the bilinear form is symmetric so that
				all the integrals are symmetric then a symmetric matrix is stored, with another
				noticible memory saving.@n
				Finally remember to call the method Problem::finalizeMatrix() that is needed to
				actually assemble the matrix.

			@subsubsection solution Solution of the linear system
				@code
					// Solve with LU sparse decomposition
					poisson.solveLU();
					// Solve with Chlolesky sparse decomposition
					poisson.solveCholesky();
					// Solve with conjugate gradient
					poisson.solveCG(Eigen::VectorXd::Zero(poisson.getDim()), 2 * poisson.getDim(), 1e-10);
					// Solve with BiCGSTAB
					poisson.solveBiCGSTAB(Eigen::VectorXd::Zero(poisson.getDim()), 2 * poisson.getDim(), 1e-10);
				@endcode

				Eventually the solution of the linear system can be obtained through four
				methods provided by the class Problem exploiting the library Eigen
				(see https://eigen.tuxfamily.org/dox/group__TopicSparseSystems.html for more
				information).@n
				The iterative ones need an initial guess and allow to set a maximum number
				of iteration and a tolerance for the convergence.

				@code
					// Export the solution
					poisson.exportSolutionVTK("solution.vtu");
					// Compute the L2 norm of the error
					Real errL2  = computeErrorL2(uex);
					// Compute the H1 seminorm of the error
					Real errH10 = computeErrorH10(uexGrad);
				@endcode

			At very last you can export the solution in a VTK format in order to visualize it
			or you can compute the L2 norm and H1 seminorm of the error if you know the
			analitical solution and its gradient.
*/
}
